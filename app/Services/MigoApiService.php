<?phpnamespace App\Services;use Illuminate\Support\Facades\Http;use Illuminate\Http\Client\RequestException;use Log;use Illuminate\Support\Str;class MigoApiService{    protected string $baseUrl;    protected string $token;    public function __construct()    {        $this->baseUrl = config('services.migo_api.base_uri');        $this->token   = config('services.migo_api.token');    }    public function post(string $resource, array $payload = []): array    {        $endpoint = '/' . ltrim($resource, '/');        try {            $response = Http::baseUrl($this->baseUrl)                ->acceptJson()->post($endpoint, $payload);            if ($response->status() === 404) {                return [];            }            if ($response->clientError()) {                throw new \RuntimeException("Error de cliente en Migo ({$response->status()})");            }            if ($response->serverError()) {                throw new \RuntimeException("Error de servidor en Migo ({$response->status()})");            }            $contentType = $response->header('Content-Type', '');            if (! Str::contains($contentType, 'application/json')) {                throw new \RuntimeException(                    "Respuesta inesperada de Migo (status {$response->status()}): "                    . substr($response->body(), 0, 200)                );            }            return $response->json();        } catch (RequestException $e) {            Log::error("Error POST a {$endpoint}", [                'url'     => $e->request->url(),                'payload' => $payload,                'status'  => $e->response?->status(),                'body'    => $e->response?->body(),                'error'   => $e->getMessage(),            ]);            throw $e;        }    }}